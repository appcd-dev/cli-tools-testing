// import { CliTestHelper } from '../utils/CliTestHelper';

// describe('Table Verification Tests', () => {
//   let cli: CliTestHelper;

//   beforeAll(() => {
//     cli = new CliTestHelper('./your-cli-executable');
//   });

//   describe('Basic Table Verification', () => {
//     it('should verify table contains specific columns with values', async () => {
//       await cli.expectTableContains({
//         command: 'list',
//         args: ['--format', 'table']
//       }, [
//         { name: 'ID', value: 'i-123456' },
//         { name: 'Type', value: 't2.micro' },
//         { name: 'State', value: /running|stopped/ }
//       ]);
//     });

//     it('should verify table row count', async () => {
//       await cli.expectTableRowCount({
//         command: 'list',
//         args: ['--format', 'table']
//       }, 5);
//     });

//     it('should verify specific table row exists', async () => {
//       await cli.expectTableRow({
//         command: 'list',
//         args: ['--format', 'table']
//       }, {
//         ID: 'i-123456',
//         Type: 't2.micro',
//         State: 'running'
//       });
//     });
//   });

//   describe('Advanced Table Verification', () => {
//     it('should verify column contains specific values', async () => {
//       await cli.expectTableColumnValues({
//         command: 'list',
//         args: ['--format', 'table']
//       }, 'Type', [
//         't2.micro',
//         't2.small',
//         /t2\.medium/
//       ]);
//     });

//     it('should verify table structure with regex patterns', async () => {
//       await cli.expectTableContains({
//         command: 'list',
//         args: ['--format', 'table']
//       }, [
//         { name: 'ID', value: /^i-[a-z0-9]+$/ },
//         { name: 'Type', value: /^t2\.[a-z]+$/ },
//         { name: 'State', value: /^(running|stopped|terminated)$/ }
//       ]);
//     });
//   });

//   describe('Complex Table Verification', () => {
//     it('should verify multiple conditions in table', async () => {
//       const result = await cli.expectTableContains({
//         command: 'list',
//         args: ['--format', 'table', '--detailed']
//       }, [
//         { name: 'ID', value: /^i-[a-z0-9]+$/ },
//         { name: 'Type', value: /^t2\.[a-z]+$/ },
//         { name: 'State', value: 'running' },
//         { name: 'Region', value: 'us-west-2' }
//       ]);

//       // Additional verification of the result
//       const table = result.stdout.split('\n');
//       expect(table.length).toBeGreaterThan(2); // At least header + separator + one row
//     });
//   });
// }); 